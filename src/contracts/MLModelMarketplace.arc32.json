{
    "hints": {
        "registerModel(uint64,pay)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "purchaseModel(uint64,pay)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "initiateFederatedTraining(uint64,uint64,pay)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "joinFederatedTraining(uint64,uint64,pay)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "distributeTrainingRewards(uint64,account,uint64)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "updateModelStatus(uint64,uint64)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "withdrawPlatformFees(uint64)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getModelInfo(uint64)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getTrainingSessionInfo(uint64)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getUserModelAccess(account)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getUserContributions(account)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 0,
            "num_uints": 2
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "modelCounter": {
                    "type": "uint64",
                    "key": "modelCounter"
                },
                "trainingSessionCounter": {
                    "type": "uint64",
                    "key": "trainingSessionCounter"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "MLModelMarketplace",
        "methods": [
            {
                "name": "registerModel",
                "args": [
                    {
                        "type": "uint64",
                        "name": "price",
                        "desc": "- Price of the model in microAlgos"
                    },
                    {
                        "type": "pay",
                        "name": "payTxn",
                        "desc": "- Payment transaction for registration fee"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64",
                    "desc": "The model ID of the registered model"
                },
                "desc": "Registers a new ML model in the marketplace"
            },
            {
                "name": "purchaseModel",
                "args": [
                    {
                        "type": "uint64",
                        "name": "modelId",
                        "desc": "- ID of the model to purchase"
                    },
                    {
                        "type": "pay",
                        "name": "payTxn",
                        "desc": "- Payment transaction for model purchase"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64",
                    "desc": "The model ID purchased"
                },
                "desc": "Purchases access to a model"
            },
            {
                "name": "initiateFederatedTraining",
                "args": [
                    {
                        "type": "uint64",
                        "name": "modelId",
                        "desc": "- ID of the model to train"
                    },
                    {
                        "type": "uint64",
                        "name": "rewardAmount",
                        "desc": "- Amount to allocate for participant rewards"
                    },
                    {
                        "type": "pay",
                        "name": "payTxn",
                        "desc": "- Payment transaction for reward pool funding"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64",
                    "desc": "The training session ID"
                },
                "desc": "Initiates a federated learning training session"
            },
            {
                "name": "joinFederatedTraining",
                "args": [
                    {
                        "type": "uint64",
                        "name": "sessionId",
                        "desc": "- ID of the training session to join"
                    },
                    {
                        "type": "uint64",
                        "name": "contributionAmount",
                        "desc": "- Amount participant contributes for training"
                    },
                    {
                        "type": "pay",
                        "name": "payTxn",
                        "desc": "- Payment transaction for contribution"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64",
                    "desc": "The participant count after joining"
                },
                "desc": "Allows participants to join federated learning training"
            },
            {
                "name": "distributeTrainingRewards",
                "args": [
                    {
                        "type": "uint64",
                        "name": "sessionId",
                        "desc": "- ID of the training session"
                    },
                    {
                        "type": "account",
                        "name": "participant",
                        "desc": "- Participant account to reward"
                    },
                    {
                        "type": "uint64",
                        "name": "rewardShare",
                        "desc": "- Share of total reward to distribute"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64",
                    "desc": "The amount distributed"
                },
                "desc": "Distributes rewards to federated learning participants"
            },
            {
                "name": "updateModelStatus",
                "args": [
                    {
                        "type": "uint64",
                        "name": "modelId",
                        "desc": "- ID of the model to update"
                    },
                    {
                        "type": "uint64",
                        "name": "status",
                        "desc": "- New status (1 for active, 0 for inactive)"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64",
                    "desc": "The updated status"
                },
                "desc": "Updates model status (activate/deactivate)"
            },
            {
                "name": "withdrawPlatformFees",
                "args": [
                    {
                        "type": "uint64",
                        "name": "amount",
                        "desc": "- Amount to withdraw"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64",
                    "desc": "The amount withdrawn"
                },
                "desc": "Withdraws platform fees (only callable by contract creator)"
            },
            {
                "name": "getModelInfo",
                "args": [
                    {
                        "type": "uint64",
                        "name": "modelId",
                        "desc": "- ID of the model to query"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64",
                    "desc": "Model price if model exists and is active"
                },
                "desc": "Gets model information"
            },
            {
                "name": "getTrainingSessionInfo",
                "args": [
                    {
                        "type": "uint64",
                        "name": "sessionId",
                        "desc": "- ID of the training session to query"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64",
                    "desc": "Number of participants in the training session"
                },
                "desc": "Gets training session information"
            },
            {
                "name": "getUserModelAccess",
                "args": [
                    {
                        "type": "account",
                        "name": "user",
                        "desc": "- Account to check access for"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64",
                    "desc": "Number of models the user has access to"
                },
                "desc": "Gets user's model access count"
            },
            {
                "name": "getUserContributions",
                "args": [
                    {
                        "type": "account",
                        "name": "user",
                        "desc": "- Account to check contributions for"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64",
                    "desc": "Total contribution amount"
                },
                "desc": "Gets user's total contributions to federated learning"
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}